// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package postgres

import (
	"context"
)

const getMessage = `-- name: GetMessage :one
SELECT id, message FROM "messages"
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMessage(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessage, id)
	var i Message
	err := row.Scan(&i.ID, &i.Message)
	return i, err
}

const getMessageIds = `-- name: GetMessageIds :many
SELECT id FROM "messages"
ORDER BY id
`

func (q *Queries) GetMessageIds(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getMessageIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
